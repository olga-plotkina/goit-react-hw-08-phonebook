{"version":3,"file":"static/js/285.69001554.chunk.js","mappings":"sOAuIA,UAlIqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAkCN,EAAAA,EAAAA,UAAS,MAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KACA,GAAoCR,EAAAA,EAAAA,UAAS,MAA7C,eAAOS,EAAP,KAAmBC,EAAnB,KACA,GAA0CV,EAAAA,EAAAA,UAAS,MAAnD,eAAOW,EAAP,KAAsBC,EAAtB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACd,OAAQf,GACN,IAAK,OACHC,EAAQc,GACR,MACF,IAAK,QACHZ,EAASY,GACT,MACF,IAAK,WACHV,EAAYU,GACZ,MACF,QACE,OAEL,EA+BD,OACE,UAAC,IAAD,CACEC,UAAU,OACVC,GAAI,CACFC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,QAAS,OACTC,cAAe,SACfC,IAAK,EACLC,SAAU,QACVC,aAAc,OAEhBC,SA3CiB,SAAAd,GACnBA,EAAMe,iBAEHf,EAAMC,OAAOe,SAAS3B,MAAMa,MAAMe,MACjCjB,EAAMC,OAAOe,SAAS3B,MAAM6B,UAG9BtB,GAAc,GAGbI,EAAMC,OAAOe,SAASzB,SAASW,MAAMe,MACpCjB,EAAMC,OAAOe,SAASzB,SAAS2B,UAGjCpB,GAAiB,GAGhBE,EAAMC,OAAOe,SAAS7B,KAAKe,MAAMe,MAChCjB,EAAMC,OAAOe,SAAS7B,KAAK+B,UAG7BxB,GAAa,GAEfV,GAASmC,EAAAA,EAAAA,IAAS,CAAEhC,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KACjCH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACb,EAGC,WAeE,SAAC,IAAD,CACE4B,MAAM,OACNC,QAAQ,WACRC,MAAM,UACNC,KAAK,QACLC,KAAK,OACLrC,KAAK,OACLsC,WAAY,CACVP,QAAS,0HAEXQ,MAAOjC,EACPS,MAAOf,EACPwC,SAAU5B,EACVmB,QAAQ,yHACRU,MAAM,yIACNC,UAAQ,KAGV,SAAC,IAAD,CACET,MAAM,QACNC,QAAQ,WACRC,MAAM,UACNC,KAAK,QACLC,KAAK,QACLrC,KAAK,QACLuC,MAAO/B,EACP8B,WAAY,CACVP,QAAS,2DAEXhB,MAAOb,EACPsC,SAAU5B,EACV6B,MAAM,+FACNC,UAAQ,KAGV,SAAC,IAAD,CACET,MAAM,WACNC,QAAQ,WACRG,KAAK,WACLrC,KAAK,WACLe,MAAOX,EACPoC,SAAU5B,EACV2B,MAAO7B,EACP4B,WAAY,CACVP,QAAS,YAEXI,MAAM,UACNC,KAAK,QACLK,MAAM,+FACNC,UAAQ,KAGV,SAAC,IAAD,CAAQR,QAAQ,YAAYG,KAAK,SAAjC,wBAKL,C","sources":["pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Card, TextField, Button } from '@mui/material';\nimport { useState } from 'react';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [nameError, setNameError] = useState(null);\n  const [emailError, setEmailError] = useState(null);\n  const [passwordError, setPasswordError] = useState(null);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (\n      !event.target.elements.email.value.match(\n        event.target.elements.email.pattern\n      )\n    ) {\n      setEmailError(true);\n    }\n    if (\n      !event.target.elements.password.value.match(\n        event.target.elements.password.pattern\n      )\n    ) {\n      setPasswordError(true);\n    }\n    if (\n      !event.target.elements.name.value.match(\n        event.target.elements.name.pattern\n      )\n    ) {\n      setNameError(true);\n    }\n    dispatch(register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <Card\n      component=\"form\"\n      sx={{\n        py: '35px',\n        px: '30px',\n        mx: 'auto',\n        mb: '30px',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 2,\n        maxWidth: '350px',\n        autoComplete: 'off',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <TextField\n        label=\"Name\"\n        variant=\"standard\"\n        color=\"primary\"\n        size=\"small\"\n        type=\"text\"\n        name=\"name\"\n        inputProps={{\n          pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n        }}\n        error={nameError}\n        value={name}\n        onChange={handleChange}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <TextField\n        label=\"Email\"\n        variant=\"standard\"\n        color=\"primary\"\n        size=\"small\"\n        type=\"email\"\n        name=\"email\"\n        error={emailError}\n        inputProps={{\n          pattern: '^([0-9a-zA-Zd_.-])+@(([a-zA-Zd-])+.)+([a-zA-Zd]{2,4})+$',\n        }}\n        value={email}\n        onChange={handleChange}\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <TextField\n        label=\"Password\"\n        variant=\"standard\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        error={passwordError}\n        inputProps={{\n          pattern: '^.{4,8}$',\n        }}\n        color=\"primary\"\n        size=\"small\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n\n      <Button variant=\"contained\" type=\"submit\">\n        Register\n      </Button>\n    </Card>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","nameError","setNameError","emailError","setEmailError","passwordError","setPasswordError","handleChange","event","target","value","component","sx","py","px","mx","mb","display","flexDirection","gap","maxWidth","autoComplete","onSubmit","preventDefault","elements","match","pattern","register","label","variant","color","size","type","inputProps","error","onChange","title","required"],"sourceRoot":""}